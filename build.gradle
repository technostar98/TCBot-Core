apply plugin: 'java'

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? ".B-" + System.getenv('BUILD_NUMBER') : ""

version = "0.0.001${buildnumber}"
group = "com.technostar.tcbot"

if (System.getenv('BUILD_NUMBER') != null) {
    println "INFO: Build number detected - Adding suffix to .jar version"
    println "INFO: Current build number: " + System.getenv('BUILD_NUMBER')
    println "INFO: Version number: " + project.version
}else {
    println "INFO: No build number was detected...Feel free to ignore this if you are not a continuous intergration server."
    println "INFO: Your version is: " + project.version
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.pircbotx:pircbotx:2.0.1'
    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'org.slf4j:slf4j-simple:1.7.5'
    compile 'org.xerial:sqlite-jdbc:3.8.7'
    compile 'com.google.code.gson:gson:2.3.1'
}

jar {
    manifest {
        def requiredProjects = ''
        configurations.compile.getAllDependencies().withType(ProjectDependency).each {dep->
            def dependantProjects = dep.getDependencyProject()
            def projects = project(dependantProjects.path).libsDir.list().findAll{it.endsWith('.jar')}
            projects.removeAll(projects.findAll{it.endsWith('test.jar')})
            def requiredProject = projects.join(' ')
            requiredProjects +=  requiredProject.replaceAll(/ /,'%20') + ' '
//            logger.info 'Required Project: ' + requiredProject
        }
//        logger.info 'Required requiredProjects: ' + requiredProjects

        def compileFiles = configurations.compile.files{ it instanceof ExternalDependency }.collect  {
            File file = it
            "lib/${file.name}"
        }.join(' ')

        def manifestPath = requiredProjects + compileFiles
//        logger.info 'Manifest: '+ manifestPath
        attributes 'Main-Class': "com.technostar98.tcbot.Launcher"
        attributes 'Class-Path': manifestPath
        attributes 'Build-date': new Date();
        attributes 'Application-Version': project.version
    }
}

/**
 * Copies the dependencies to the lib directory in preparation for them to be added to a jar file
 */

build.doLast {
    copyLibs()
    copyScripts()
    updateModuleBuild()
}

def copyLibs(){
    String s = File.separator

    copy {
        println "Copying libs."
        into('build' + s + 'libs' + s + 'lib')
        from configurations.runtime
        exclude 'TCBot-' + version + '.jar'
    }
}

def copyScripts(){
    String s = File.separator

    copy {
        println "Copying run scripts."
        into('build' + s + 'libs')
        from 'include'
    }

    File windows = new File('build' + s + 'libs' + s + 'launch.bat')
    File linux = new File('build' + s + 'libs' + s + 'launch.sh')

    if(!windows.exists() || !linux.exists()){
        println "Could not find launch.bat or launch.sh."
        return 0
    }else{
        println "Found launch.bat and launch.sh. Replacing version and params."
    }

    windows.text = windows.getText().replace('{JAR}', 'TCBot-' + project.version + '.jar')
    linux.text = linux.getText().replace('{JAR}', 'TCBot-' + project.version + '.jar').replace("\r\n", "\n")
}

def updateModuleBuild(){
    String s = File.separator

    copy{
        from 'moduleInclude'
        into 'build/module'
    }

    File script = new File('build' + s + 'module' + s + 'build.gradle')

    if(!script.exists()){
        println 'Could not find module build script.'
        return 0
    }else{
        println 'Found build.gradle in moduleInclude, now updating.'
    }

    script.text = script.getText().replace('{BOT_VERSION}', project.version)
}


task zip(type: Zip)  {
    println "Building zip."
    from 'build/libs'
    baseName = 'TCBot'
    classifier = 'zipped'
}

task zipModule(type: Zip) {
    println "Building module zip."

    baseName = 'TCBot_Module'
    appendix = 'base'
    classifier = 'zipped'

    from ('build/module'){
        into ''
    }
    from ('build/libs/TCBot-' + project.version +  '.jar'){
        into 'lib/'
    }
}