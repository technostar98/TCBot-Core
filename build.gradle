apply plugin: 'java'

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : 0

version = "0.0.001.B-${buildnumber}"
group = "com.technostar.tcbot"

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.pircbotx:pircbotx:2.0.1'
    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'org.slf4j:slf4j-simple:1.7.5'
}

jar {
    manifest {
        def requiredProjects = ''
        configurations.compile.getAllDependencies().withType(ProjectDependency).each {dep->
            def dependantProjects = dep.getDependencyProject()
            def projects = project(dependantProjects.path).libsDir.list().findAll{it.endsWith('.jar')}
            projects.removeAll(projects.findAll{it.endsWith('test.jar')})
            def requiredProject = projects.join(' ')
            requiredProjects +=  requiredProject.replaceAll(/ /,'%20') + ' '
//            logger.info 'Required Project: ' + requiredProject
        }
//        logger.info 'Required requiredProjects: ' + requiredProjects

        def compileFiles = configurations.compile.files{ it instanceof ExternalDependency }.collect  {
            File file = it
            "lib/${file.name}"
        }.join(' ')

        def manifestPath = requiredProjects + compileFiles
//        logger.info 'Manifest: '+ manifestPath
        attributes 'Main-Class': "com.technostar98.tcbot.Launcher"
        attributes 'Class-Path': manifestPath
        attributes 'Build-date': new Date();
        attributes 'Application-Version': project.version
    }
}

/**
 * Copies the dependencies to the lib directory in preparation for them to be added to a jar file
 */


task publishZip(type: Zip) {
    copyRuntimeDependencies()

    from 'build/libs'
    baseName = 'TCBot'
    classifier = 'zipped'
}

def copyRuntimeDependencies() {
    /* into('build/output')
     from configurations.runtime*/

    copy {
        into('build/libs/lib')
        from configurations.runtime
        exclude 'TCBot-' + version + '.jar'
    }

    copy {
        into('build/libs')
        from 'include'
    }

    updateRunScripts()
}

def updateRunScripts() {
    File windows = new File('build/libs/launch.bat')
    File linux = new File('build/libs/launch.sh')

    if(!windows.exists() || !linux.exists()){
        println "Could not find launch.bat or launch.sh"
        return 0
    }else{
        println "Found launch.bat and launch.sh"
    }

    windows.text = windows.getText().replace('{JAR}', 'TCBot-' + project.version + '.jar')
    linux.text = linux.getText().replace('{JAR}', 'TCBot-' + project.version + '.jar')
}
